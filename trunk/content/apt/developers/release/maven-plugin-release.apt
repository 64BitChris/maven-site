 -----
 Releasing A Maven Plugin
 -----
 Jason van Zyl
 Herv√© Boutemy
 -----
 2012-03-12
 -----

~~ Licensed to the Apache Software Foundation (ASF) under one
~~ or more contributor license agreements.  See the NOTICE file
~~ distributed with this work for additional information
~~ regarding copyright ownership.  The ASF licenses this file
~~ to you under the Apache License, Version 2.0 (the
~~ "License"); you may not use this file except in compliance
~~ with the License.  You may obtain a copy of the License at
~~
~~   http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing,
~~ software distributed under the License is distributed on an
~~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~~ KIND, either express or implied.  See the License for the
~~ specific language governing permissions and limitations
~~ under the License.

Releasing A Maven Plugin

  Releasing a Maven plugin is much the same as any other Maven project. The following
  guide walks through most of the steps:

    * {{{./maven-project-release-procedure.html} Maven Project Common Release procedure}}
  
  Note that plugins have particular conventions for deploying the project site.
  When encountered in the release process above, perform the following steps:
  
* Staging the latest documentation

  Once the release is prepared, but before the release vote, the site needs to be staged.

  The plugin parent POM will be configured (TODO) to publish the documentation in Apache svn
  https://svn.apache.org/repos/infra/websites/production/maventest/content/plugins/maven-XXX-plugin-latest.

   [[1]] Stage the documentation for the current release version (not the new snapshot).

+------+
cd target/checkout

mvn -Preporting site site:stage scm-publish:publish-scm \
    -Dscmpublish.pubScmUrl=scm:svn:https://svn.apache.org/repos/infra/websites/production/maventest/content/plugins/maven-XXX-plugin-latest

svn cp https://svn.apache.org/repos/infra/websites/production/maventest/content/plugins/maven-XXX-plugin-latest \
       https://svn.apache.org/repos/infra/websites/production/maventest/content/plugins/maven-XXX-plugin-Y.Z
+------+

   <<Note:>> You should verify the deployment of the site on the Maven website
   (you need to wait {{{http://www.apache.org/dev/cms.html#svnpubsub}snvpubsub}}), which should be a matter of seconds.

+-----+
http://maven.apache.org/plugins/maven-XXX-plugin-Y.Z/
+-----+

   [[2]] declare the <<<plugins/maven-XXX-plugin-Y.Z>>> directory in {{{/extpaths.txt}extpaths.txt}}, locally or
   {{{https://cms.apache.org/redirect?uri=http://maventest.apache.org/extpaths.txt&action=edit}with the CMS}}.

* Publishing the release website

  After the release has passed, the site needs to be updated to point to the new release: edit the content/filtered-resources/.htaccess file
  (locally or
  {{{https://cms.apache.org/redirect?uri=http://maventest.apache.org/filtered-resources/.htaccess&action=edit}with the CMS}}) to update rewrite rule

+-------+
RewriteRule ^plugins/maven-XXX-plugin/(.*)$ /plugins/maven-XXX-plugin-Y.Z/$1 [L]
+-------+


* Updating the Maven site

 Use the CMS to update {{{/plugins/}the plugins page}}, made easy with the CMS bookmarklet.

* idea to be developped if sufficient people is interested

  Instead of doing command line svn and extpaths.txt + .htaccess edits, the staging/release operations could be automated
  as web ui like following:

  * http://cms.apache.org/maventest/release/plugins/maven-xxx-plugin-X.Y could display a page proposing to <<stage the release
  documentation>> (doing svn command and .htaccess edit)

  * next time this page is displayed, with the content already available in svn, the page could propose 2 different actions:
  <<drop the staged documentation>> (with extpaths.txt removal) or <<publish the release website>>.

  []